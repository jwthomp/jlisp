[ ] atom
[ ] Tuple support
[ ] Bit format support
[ ] Function pattern matching
[ ] receive pattern matching
[ ] Implement let* (sequential)
[ ] Fix so that value_t's can be compared against eachother
[ ] Add support for floats
[ ] Add in support for multi-generational GC
[ ] Implement for
[ ] List comprehensions
[ ] implement deconstruct-bind
[ ] Support packages
[ ] Add FFI support
[ ] How to do shared dev?
[ ] Tuples
[ ] Matching
[ ] Packages - Put in own symbols.* files

[ ] Test Eval and Load


[ ] Loadf symbols that are undefined, and load binding when they are
[ ] Support flet and dynamic scoping
[ ] Move all binding related code into binding.*

[ ] Funcall should support multiple arguments so params are passed
[ ] Write basic eval
[ ] Write eval with macro expand

[ ] Move top level kern_env and usr_env to their own heap and anything put there should get stuck onto that heap
[ ] Allow processes to be freed
[ ] Process spawning and death
	[ ] Create VT_PID
	[ ] Write Spawn
	[ ] Allow process to die
[ ] Make stack data and env array data values so they get cleaned up when a vm dies
[ ] Send/Receive for processes

[ ] Write unit tests for stable functionality


[ ] Support `,
[ ] Support ,@
[ ] Improve verify messages
[ ] Support for examining stack
[ ] Support for examining closure
[ ] Make a master VM which handles things like temporary strings, and static binds

[ ] Need to make read not block
read ->
	VM -> Call read ifunc
	C -> do we have a character
	C -> Should we return, if yes return the value read in
	C -> If not, return some kind of continue value
	VM -> If read in value, return
	VM -> If continue, jump to call (since jmp is an instruction a test should
			take place to see if another process should run


[/] fix &rest so 'a sets args to ('a)


[X] Make nil, voidobj  and t static symbols that aren't tied to a vm
[x] Get dynval storing and restoration to work with mp vm_exec
[X] Dynamic scope
		[X] Leaving closure that added to scope should remove it
			[X] What about when someone does defparameter or setq inside of closure?
		[X] Fix gc bug
		[x] Fix setq
[X] Fix bug in reader where strings were being capitalized
[X] Fix bug in lisp running repl where (let (())...) was not properly finding binding
[X] Add in a binary heap where all binary objects (strings, etc) that don't need to be
    moved but are mark/swept instead
[X] Add in support for multiple pools between garbage collections
[X] Get unit test suite in here
[X] Need to have main just launch this code for the vm
[x] Implement eval
[x] Implement read
[x] Implement (loop (print (eval (read))))
[X] Implement Loop
[X] Move special form macro's out of compile and into lib
[X] Fix (progn 'a 'b)
[X] macro's do not have their arguments expanded. Fix this
[X] Allow C lisp functions to be flagged as macros
[X] (let ((counter 1)) (defun inc () (setq counter (+ counter 1))) (defun reset () (setq counter 0)))
[X] Make lambda handle multiple args in body and only return result of last
[X] Implement progn -> convert to lambda
[X] Modify let to just result in a lambda
[X] Try (defvar x 1) (cond ((< x 0) (setq x (+ x 10))))
[X] Make sure that setq updates x
[X] Implement defvar binds value in current env
[X] Fix lambda ((lambda (x) (print x)) 10)
[X] Do argument count checking for built in special forms
[X] Fix reading from command line to not submit to reader until a complete form is ready
[X] write unwind-protect - does a setjmp that will execute a different body of code
[X] Support loading from a file
[X] Exceptions
[X] Reader macro -> '
[X] fix crash in (cond ((eq 1 1) (status)))
[X] Implement macros
[X] fix crash in (gc) then (cons a b)
[X] Make binding a lisp object (cons)
[X] cond
[X] quote, eq, cons, car, cdr, cond
[X] Defparameter
[X] Add support for defun add1 (x) (+ 1 x)
[X] Modify reader to handle numbers
[X] Modify reader to handle strings
[X] Fix search for a binding in an environment
[X] Get typing a symbol in by itself working
[X] Make an environment type lisp object
[X] Implement special operators - quote, setq, lambda
[X] Write compiler
[X] Implement Closure lisp object
[X] Implement Lambda lisp object
